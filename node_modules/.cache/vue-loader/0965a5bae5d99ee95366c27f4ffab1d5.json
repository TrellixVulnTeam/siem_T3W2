{"remainingRequest":"D:\\project\\prj_scms\\branch_ducdm\\tkmsiem\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\prj_scms\\branch_ducdm\\tkmsiem\\src\\views\\task\\KanBoard.vue?vue&type=style&index=0&id=509c4ca4&lang=sass&scoped=true&","dependencies":[{"path":"D:\\project\\prj_scms\\branch_ducdm\\tkmsiem\\src\\views\\task\\KanBoard.vue","mtime":1640353310878},{"path":"D:\\project\\prj_scms\\branch_ducdm\\tkmsiem\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\prj_scms\\branch_ducdm\\tkmsiem\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\project\\prj_scms\\branch_ducdm\\tkmsiem\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\project\\prj_scms\\branch_ducdm\\tkmsiem\\node_modules\\sass-loader\\lib\\loader.js","mtime":1533139052000},{"path":"D:\\project\\prj_scms\\branch_ducdm\\tkmsiem\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\project\\prj_scms\\branch_ducdm\\tkmsiem\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoudGFzay1saXN0DQogIG1pbi1oZWlnaHQ6IDUwMHB4DQogIHBhZGRpbmc6IDANCiAgJl9faXRlbQ0KICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlDQogIC5zb3J0YWJsZS1jaG9zZW4sDQogIC5zb3J0YWJsZS1naG9zdA0KICAgIGJvcmRlcjogMXB4IGRvdHRlZCB2YXIoLS12LXByaW1hcnktYmFzZSkNCiAgICBiYWNrZ3JvdW5kOiAjZWVlDQo="},{"version":3,"sources":["KanBoard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"KanBoard.vue","sourceRoot":"src/views/task","sourcesContent":["<template>\r\n  <div class=\"kanboard\">\r\n    <v-container>\r\n      <v-row>\r\n        <v-col :cols=\"12\">\r\n          <v-autocomplete\r\n            v-model=\"project_id\"\r\n            :items=\"getProjectList\"\r\n            label=\"Select Project\"\r\n            @change=\"handleProjectChange\"\r\n          >\r\n          </v-autocomplete>\r\n        </v-col>\r\n        <template v-for=\"col in getTaskStatus\">\r\n          <v-col :key=\"col.value\">\r\n            <v-card :loading=\"loading\">\r\n              <v-toolbar flat>\r\n                <v-toolbar-title>{{ col.text }} </v-toolbar-title>\r\n                <v-spacer />\r\n                <v-btn icon @click=\"handleCreateTask\">\r\n                  <v-icon>mdi-plus</v-icon>\r\n                </v-btn>\r\n              </v-toolbar>\r\n              <v-divider />\r\n              <v-card-text :id=\"'task-list__' + col.value\" class=\"task-list\" :data-status=\"col.value\">\r\n                <template v-for=\"task in getTaskByStatus(col.value)\">\r\n                  <div :key=\"task.id\" :data-id=\"task.id\" class=\"task-list__item\">\r\n                    <v-list-item :value=\"task\">\r\n                      <v-list-item-avatar>\r\n                        <v-icon v-if=\"!task.owner\">mdi-account-circle</v-icon>\r\n                        <c-avatar v-else :size=\"32\" :username=\"task.owner\" :src=\"computeAvatar(task.owner)\" />\r\n                      </v-list-item-avatar>\r\n                      <v-list-item-content>\r\n                        <v-list-item-title> #{{ task.id }} {{ task.name }}</v-list-item-title>\r\n                        <v-list-item-subtitle>{{ task.description }}</v-list-item-subtitle>\r\n                      </v-list-item-content>\r\n                      <v-list-item-action>\r\n                        <v-icon small @click.stop=\"handleEditItem(task)\">mdi-pencil</v-icon>\r\n                      </v-list-item-action>\r\n                    </v-list-item>\r\n                  </div>\r\n                </template>\r\n              </v-card-text>\r\n            </v-card>\r\n          </v-col>\r\n        </template>\r\n      </v-row>\r\n    </v-container>\r\n    <v-dialog v-model=\"showDialog\" scrollable width=\"840\">\r\n      <task-form :item=\"selectedItem\" @form:success=\"handleFormSuccess\" />\r\n    </v-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CAvatar from '@/components/avatar/CAvatar'\r\nimport TaskForm from '@/components/form/TaskForm'\r\nimport Sortable from 'sortablejs'\r\nimport TooltipMixin from '@/mixins/Tooltip'\r\nexport default {\r\n  name: 'KanBoard',\r\n  components: {\r\n    CAvatar,\r\n    TaskForm,\r\n  },\r\n  mixins: [TooltipMixin],\r\n  data() {\r\n    return {\r\n      project_id: 1,\r\n      showDialog: false,\r\n      loading: false,\r\n      items: [],\r\n      selectedItem: null,\r\n      actions: [\r\n        {\r\n          text: 'Edit Item',\r\n          icon: 'mdi-pencil',\r\n          click: this.handleEditItem,\r\n        },\r\n        {\r\n          text: 'Delete Item',\r\n          icon: 'mdi-close',\r\n          click: this.handleDeleteItem,\r\n        },\r\n      ],\r\n    }\r\n  },\r\n  computed: {\r\n    getTaskStatus () {\r\n      return this.$store.getters['task/getTaskStatus']\r\n    },\r\n    getProjectList () {\r\n      return this.$store.getters['task/getProjectList']\r\n    }\r\n  },\r\n  created() {\r\n    this.$store.dispatch('task/fetchProject')\r\n    this.fetchTask()\r\n    this.$nextTick(() => {\r\n      this.getTaskStatus.forEach((item) => {\r\n        new Sortable(document.querySelector(`#task-list__${item.value}`), {\r\n          group: 'shared',\r\n          animation: 150,\r\n          onEnd: (e) => {\r\n            const taskId = e.item.dataset.id\r\n            const status = e.to.dataset.status\r\n            this.$store.dispatch('task/updateTaskStatus', { id: taskId, status: status })\r\n          },\r\n        })\r\n      })\r\n    })\r\n  },\r\n  methods: {\r\n    fetchTask() {\r\n      this.items = []\r\n      this.loading = true\r\n      const query = {\r\n        'filter[project_id]': this.project_id,\r\n      }\r\n      this.$store\r\n        .dispatch('task/fetchTask', query)\r\n        .then((resp) => {\r\n          this.items = resp.data\r\n          this.loading = false\r\n        })\r\n        .catch(() => {\r\n          this.loading = false\r\n        })\r\n    },\r\n    computeAvatar(username) {\r\n      const avatar = this.getUsername === username ? this.getAvatar : ''\r\n      return avatar\r\n    },\r\n    handleProjectChange() {\r\n      this.fetchTask()\r\n    },\r\n    getTaskByStatus(status) {\r\n      return this.items.filter((item) => item.status === status)\r\n    },\r\n    handleCreateTask() {\r\n      this.selectedItem = null\r\n      this.showDialog = true\r\n    },\r\n    handleEditItem(item) {\r\n      this.selectedItem = item\r\n      this.showDialog = true\r\n    },\r\n    handleDeleteItem({ id }) {\r\n      if (window.confirm('Are you sure to delete this')) {\r\n        this.$store.dispatch('task/deleteTask', id).then(() => {\r\n          this.items = this.items.filter((item) => item.id != id)\r\n        })\r\n      }\r\n    },\r\n    handleFormSuccess() {\r\n      this.fetchTask()\r\n      this.showDialog = false\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"sass\" scoped>\r\n.task-list\r\n  min-height: 500px\r\n  padding: 0\r\n  &__item\r\n    border-bottom: 1px solid #eee\r\n  .sortable-chosen,\r\n  .sortable-ghost\r\n    border: 1px dotted var(--v-primary-base)\r\n    background: #eee\r\n</style>\r\n"]}]}